#!/usr/bin/python3
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2019 Luke Horwell <code@horwell.me>
#

import argparse
import glob
import hashlib
import os
import shutil
import re
import colorsys

# ------------------------------------------------
# Variables
# ------------------------------------------------
class Properties(object):
    def __init__(self):
        # Source
        self.base_theme = ""
        self.base_icon_theme = ""
        self.src_path = None

        # Destination
        self.new_name = ""
        self.new_hex_value = ""
        self.new_name = ""
        self.new_theme_name = ""
        self.new_icon_name = ""
        self.target_dir_icons = os.path.expanduser("~/.icons")
        self.target_dir_theme = os.path.expanduser("~/.themes")

        # Build parameters
        self.verbose = False
        self.always_overwrite = False
        self.ignore_existing = False
        self.build_theme = True
        self.build_icons = True

        # Temporary
        self.current_dir = None


def parse_arguments():
    """
    Processes the parameters (arguments) for command line usage.
    """
    parser = argparse.ArgumentParser()
    parser._optionals.title = "Avaliable Arguments"

    # Required
    parser.add_argument("--theme", help="Required. Ubuntu MATE theme to use, e.g. 'Ambiant-MATE'", action="store", required=True)
    parser.add_argument("--hex", help="Required. Colour value to use, e.g. '#5489CF'", action="store", required=True)
    parser.add_argument("--name", help="Required. Human readable suffix to identify variant, e.g. 'Blue'.", action="store", required=True)
    parser.add_argument("--src-dir", help="Required. Path to ubuntu-mate-artwork repository", action="store", required=True)

    # Optional
    parser.add_argument("--install-icon-dir", help="Path to install coloured icons", action="store")
    parser.add_argument("--install-theme-dir", help="Path to install coloured theme", action="store")
    parser.add_argument("-v", "--verbose", help="Show details of each file being processed", action="store_true")
    parser.add_argument("-y", "--overwrite", help="Suppress confirmation prompt to replace target path", action="store_true")
    parser.add_argument( "--ignore-existing", help="Ignore target folders that already exist", action="store_true")

    args = parser.parse_args()

    if not args.theme and not args.hex:
        print("Missing arguments. See --help.")
        exit(1)

    if args.theme:
        prop.base_theme = args.theme

        if prop.base_theme not in ["Ambiant-MATE", "Radiant-MATE", "Ambiant-MATE-Dark"]:
            print("Unrecognised theme: " + prop.base_theme)
            exit(1)

        theme_to_icon_set = {
            "Ambiant-MATE": "Ambiant-MATE",
            "Ambiant-MATE-Dark": "Ambiant-MATE",
            "Radiant-MATE": "Radiant-MATE"
        }

        prop.base_icon_theme = theme_to_icon_set[prop.base_theme]

    if args.hex:
        prop.new_hex_value = args.hex

    if args.name:
        prop.new_name = args.name
        prop.new_theme_name = prop.base_theme + "-" + args.name
        prop.new_icon_name = prop.base_icon_theme + "-" + prop.new_name

    if args.src_dir:
        prop.src_path = args.src_dir

        if not os.path.exists(args.src_dir):
            print("Could not find: " + args.src_dir)
            exit(1)

        if not os.path.exists(os.path.join(prop.src_path, "usr/share/themes/", prop.base_theme)):
            print("Could not locate theme: " + prop.base_theme)
            exit(1)

    if args.install_icon_dir:
        prop.target_dir_icons = args.install_icon_dir

    if args.install_theme_dir:
        prop.target_dir_theme = args.install_theme_dir

    if args.overwrite:
        prop.always_overwrite = True

    if args.verbose:
        prop.verbose = True

    if args.ignore_existing:
        prop.ignore_existing = True


def prep_targets():
    """
    Create copy of repository and perform the modifications.
    """

    def _copy_tree(item, src, dst):
        print("Copying {0} files...".format(item))

        if prop.verbose:
            print("          Source: " + src)
            print("     Destination: " + dst)

        if os.path.exists(dst):
            if prop.ignore_existing and item == "theme":
                prop.build_theme = False
                print("Skipped as target exists.\n")
                return

            if prop.ignore_existing and item == "icons":
                prop.build_icons = False
                print("Skipped as target exists.\n")
                return

            if not prop.always_overwrite:
                print("\nDirectory exists: " + dst)
                if input("Type 'y' to confirm removal: ") != "y":
                    exit(1)

            shutil.rmtree(dst)

        shutil.copytree(src, dst, symlinks=True)
        print("Copied.\n")

    prop.target_dir_theme = os.path.realpath(os.path.join(prop.target_dir_theme, prop.new_theme_name))
    prop.target_dir_icons = os.path.realpath(os.path.join(prop.target_dir_icons, prop.new_icon_name))

    _copy_tree("theme", os.path.join(prop.src_path, "usr/share/themes/", prop.base_theme), prop.target_dir_theme)
    _copy_tree("icons", os.path.join(prop.src_path, "usr/share/icons/", prop.base_icon_theme), prop.target_dir_icons)

    print("Source files copied.\n")


# ------------------------------------------------
# Function used for patching the files.
# ------------------------------------------------
def _replace_string(expr, before, after):
    """
    Scans the directory for expression and performs a string replacement.

    Params:
    - expr      (str)   Expression to glob. E.g. *.svg for all SVG files.
                (list)  Alternately, multiple expressions to glob.
    - before    (str)   Hash to change from.
    - after     (str)   Hash to change to.
    """
    def __do_replacement(path, before, after):
        """
        Opens a file in memory, replaces text and saves again.
        """
        if prop.verbose:
            print("-> {0} ... ('{1}' to '{2}')".format(path, before, after))

        newlines = []
        with open(path, "r") as f:
            lines = f.readlines()

        for line in lines:
            newlines.append(re.sub(before, after, line, flags=re.IGNORECASE))

        with open(path, "w") as f:
            f.writelines(newlines)

    expressions = []
    if type(expr) == str:
        expressions.append(expr)
    elif type(expr) == list:
        expressions = expr

    for expr in expressions:
        subpaths = glob.glob(prop.current_dir + "/*")
        for subpath in subpaths:
            if os.path.islink(subpath):
                continue

            if not os.path.isdir(subpath):
                if subpath[-11:] == "index.theme":
                    __do_replacement(subpath, before, after)

            if os.path.isdir(subpath):
                files = glob.glob(os.path.join(prop.current_dir, subpath, "**/" + expr), recursive=True)
                for path in files:
                    if os.path.islink(path):
                        continue

                    if os.path.isfile(path):
                        __do_replacement(path, before, after)


def _get_hex_variant(string, offset):
    """
    Converts hex input #RRGGBB to RGB and HLS to increase lightness independently
    """
    string = string.lstrip("#")
    rgb = list(int(string[i:i+2], 16) for i in (0, 2 ,4))

    # colorsys module converts to HLS to brighten/darken
    hls = colorsys.rgb_to_hls(rgb[0], rgb[1], rgb[2])
    newbright = hls[1] + offset
    newbright = min([255, max([0, newbright])])
    hls = (hls[0], newbright, hls[2])

    # reconvert to rgb and hex
    newrgb = colorsys.hls_to_rgb(hls[0], hls[1], hls[2])

    def _validate(value):
        value = int(value)
        if value > 255:
            return 255
        elif value < 0:
            return 0
        return value

    newrgb = [_validate(newrgb[0]), _validate(newrgb[1]), _validate(newrgb[2])]
    newhex = '#%02x%02x%02x' % (newrgb[0], newrgb[1], newrgb[2])
    return newhex


def _hex_to_rgb(hex_string):
    """
    Converts "#RRGGBB" string to rgb() CSS string.
    """
    hex_string = hex_string.lstrip("#")
    rgb = list(int(hex_string[i:i+2], 16) for i in (0, 2 ,4))
    return "rgb({0}, {1}, {2})".format(rgb[0], rgb[1], rgb[2])


def _hex_to_rgba(hex_string):
    """
    Converts "#RRGGBB" string to rgba() CSS string.
    """
    hex_string = hex_string.lstrip("#")
    rgb = list(int(hex_string[i:i+2], 16) for i in (0, 2 ,4))
    return "rgba({0}, {1}, {2})".format(rgb[0], rgb[1], rgb[2])


def _export_svg(svg, png):
    """
    Exports an SVG to a PNG file.
    """

    # Determine the size of the PNG file in the source theme
    png_path = os.path.join(prop.src_path, "usr/share/themes/", prop.base_theme, png)
    size = os.popen("identify -format '%w' {0}".format(png_path)).readlines()[0]

    if prop.verbose:
        print("-> Converting '{0}' to '{1}' at {2}x{2}...".format(svg, png, size))

    svg = os.path.join(prop.current_dir, svg)
    png = os.path.join(prop.current_dir, png)
    os.system("rsvg-convert -w {2} -h {2} -f png -o {1} {0}".format(svg, png, size))


def patch_theme():
    """
    Search through the theme and replace green with new values.
    """
    prop.current_dir = os.path.realpath(prop.target_dir_theme)

    if not prop.build_theme:
        return

    print("Patching theme...")

    # --> Metadata
    _replace_string("index.theme", "Name=" + prop.base_theme, "Name=" + prop.new_theme_name)
    _replace_string("index.theme", "GtkTheme=" + prop.base_theme, "GtkTheme=" + prop.new_theme_name)
    _replace_string("index.theme", "MetacityTheme=" + prop.base_theme, "MetacityTheme=" + prop.new_theme_name)
    _replace_string("index.theme", "IconTheme=" + prop.base_icon_theme, "IconTheme=" + prop.new_icon_name)
    _replace_string("index.theme", "Comment=", "Comment=" + prop.new_name + " ")
    _replace_string("metacity-theme-1.xml", "<name>{0}</name>".format(prop.base_theme), "<name>{0}</name>".format(prop.new_theme_name))

    # --> Base colour
    _replace_string(["*.ini", "gtkrc"], "#87A752", prop.new_hex_value)
    _replace_string(["*.ini", "gtkrc", "*.css"], "#A7BB85", _get_hex_variant(prop.new_hex_value, -21))

    _replace_string("*.css", "#87A752", prop.new_hex_value)
    _replace_string("*.css", _hex_to_rgb("#87A752"), _hex_to_rgb(prop.new_hex_value))
    _replace_string("*.css", _hex_to_rgba("#87A752"), _hex_to_rgba(prop.new_hex_value))
    _replace_string("*.css", "#84b436", _get_hex_variant(prop.new_hex_value, 5))
    _replace_string("*.css", _hex_to_rgba("#84b436"), _hex_to_rgba(prop.new_hex_value))

    # --> Assets
    _replace_string("*.svg", "#87A752", prop.new_hex_value)
    _replace_string("*.svg", "#355404", _get_hex_variant(prop.new_hex_value, -32))
    _replace_string("*.svg", "#5a782c", _get_hex_variant(prop.new_hex_value, -17))
    _replace_string("*.svg", "#64941c", _get_hex_variant(prop.new_hex_value, -14))
    _replace_string("*.svg", "#79a934", _get_hex_variant(prop.new_hex_value, -6))
    _replace_string("*.svg", "#87a556", _get_hex_variant(prop.new_hex_value, 1))
    _replace_string("*.svg", "#96b565", _get_hex_variant(prop.new_hex_value, 6))

    # --> Ambiant-MATE: Close button (normal)
    _replace_string("*.svg", "#de4c19", _get_hex_variant(prop.new_hex_value, 8))
    _replace_string("*.svg", "#e55e30", _get_hex_variant(prop.new_hex_value, 12))
    _replace_string("*.svg", "#f58d6e", _get_hex_variant(prop.new_hex_value, 16))

    # --> Ambiant-MATE: Close button (prelight)
    _replace_string("*.svg", "#e24f1b", _get_hex_variant(prop.new_hex_value, 20))
    _replace_string("*.svg", "#f17750", _get_hex_variant(prop.new_hex_value, 24))
    _replace_string("*.svg", "#fba992", _get_hex_variant(prop.new_hex_value, 28))

    # --> Ambiant-MATE: Close button (pressed)
    _replace_string("*.svg", "#ec6e44", _get_hex_variant(prop.new_hex_value, -4))
    _replace_string("*.svg", "#e76b41", _get_hex_variant(prop.new_hex_value, 0))

    # --> Radiant-MATE: Close button (normal)
    _replace_string("*.svg", "#e77041", _get_hex_variant(prop.new_hex_value, 8))
    _replace_string("*.svg", "#f17d4e", _get_hex_variant(prop.new_hex_value, 12))
    _replace_string("*.svg", "#f9b39c", _get_hex_variant(prop.new_hex_value, 16))

    # --> Radiant-MATE: Close button (prelight)
    _replace_string("*.svg", "#e67144", _get_hex_variant(prop.new_hex_value, 20))
    _replace_string("*.svg", "#ed8b67", _get_hex_variant(prop.new_hex_value, 24))
    _replace_string("*.svg", "#f9cbbd", _get_hex_variant(prop.new_hex_value, 28))

    # --> Radiant-MATE: Close button (pressed)
    _replace_string("*.svg", "#f08054", _get_hex_variant(prop.new_hex_value, -4))
    _replace_string("*.svg", "#f07c4e", _get_hex_variant(prop.new_hex_value, 0))

    print("Theme patched.\n")

    # Export new PNGs for SVGs in the theme (button border, close, etc)
    print("Generating theme assets...")
    prop.current_dir = os.path.realpath(prop.target_dir_theme)

    # GTK3 assets
    for asset in [
        "check-mixed",
        "check-mixed-alt",
        "check-mixed-hover",
        "check-mixed-hover-alt",
        "check-selected-alt",
        "check-selected-hover-alt",
        "check-selected-hover",
        "check-selected",
        "radio-mixed-alt",
        "radio-mixed-hover",
        "radio-mixed-hover-alt",
        "radio-mixed",
        "radio-selected-alt",
        "radio-selected-hover-alt",
        "radio-selected-hover",
        "radio-selected"]:
            _export_svg("gtk-3.0/assets/" + asset + ".svg", "gtk-3.0/assets/" + asset + ".png")
            _export_svg("gtk-3.0/assets/" + asset + ".svg", "gtk-3.0/assets/" + asset + "@2.png")

    # GTK2 assets
    for filename in ["check-selected.png", "radio-selected.png"]:
        src = os.path.join(prop.target_dir_theme, "gtk-3.0/assets/" + filename)
        dst = os.path.join(prop.target_dir_theme, "gtk-2.0/assets/" + filename)
        if os.path.exists(dst):
            shutil.copy(src, dst)

    # For some reason, Radiant-MATE has a different filename for "close_focused_normal"
    if prop.base_icon_theme == "Radiant-MATE":
        shutil.copy(prop.current_dir + "/unity/close_focused.svg", prop.current_dir + "/unity/close_focused_normal.svg")

    # Metacity assets
    for asset in [
        "close_focused_normal",
        "close_focused_prelight",
        "close_focused_pressed",
        "close"]:
            _export_svg("unity/" + asset + ".svg", "metacity-1/" + asset + ".png")

    # Remove unity assets as unused
    shutil.rmtree(prop.target_dir_theme + "/unity/")

    # Generate colourised variants of PNGs - bit dirty, but it seems to work.
    # These do not have an SVG. See issue #1.
    prop.current_dir = prop.target_dir_theme + "/gtk-3.0/assets/"
    os.chdir(prop.current_dir)
    for asset in [
        "button-active-focused@2.png",
        "button-active-hover@2.png",
        "button-active-focused-hover@2.png",
        "button-focused@2.png",
        "button-focused-hover@2.png",
        "button-default-focused-hover@2.png",
        "button-default-focused@2.png",
        "button-toolbar-active-focused@2.png",
        "button-toolbar-focused@2.png",
        "combobox-button-focused@2.png",
        "combobox-button-pressed-focused@2.png",
        "combobox-entry-focused@2.png",
        "entry-focused@2.png",
        "entry-toolbar-focused@2.png",
        "progressbar-horizontal-fill@2.png",
        "progressbar-vertical-fill@2.png",
        "radiance-button-toolbar-active-focused@2.png",
        "radiance-button-toolbar-focused@2.png",
        "radiance-combobox-button-toolbar-focused.png",     # No @2 file
        "radiance-entry-toolbar-focused@2.png",
        "scale-horizontal-fill@2.png",
        "scale-vertical-fill@2.png",
        "slider-horizontal-focused-hover@2.png",
        "slider-horizontal-focused@2.png",
        "slider-vertical-focused-hover@2.png",
        "slider-vertical-focused@2.png",
        "switch-button-on@2.png",
        "switch-trough-focused@2.png",
        "switch-trough-on@2.png",
        "switch-trough-toolbar-on@2.png"]:
            if prop.verbose:
                print("-> " + os.path.join(prop.current_dir, asset))

            # tmp_ is used as temporary files
            # Also use '@2' versions first.
            os.rename(os.path.join(prop.current_dir, asset),
                os.path.join(prop.current_dir, "tmp_" + asset))

            os.system("convert {dir}{input} -colorspace gray {dir}{output}".format(
                dir=prop.current_dir,
                input="tmp_" + asset,
                output="tmp_grey_" + asset))

            os.system("convert {dir}{input} -background white -fill '{hex}' -tint 100 {dir}{output}".format(
                dir=prop.current_dir,
                input="tmp_grey_" + asset,
                output=asset,
                hex=prop.new_hex_value))

            # Generate 1x if 2x was processed.
            if asset.find("@2") != -1:
                if prop.verbose:
                    print("-> " + os.path.join(prop.current_dir, asset.replace("@2", "")))
                os.system("convert {dir}{input} -resize 50% {dir}{output}".format(
                    dir=prop.current_dir,
                    input=asset,
                    output=asset.replace("@2", "")))

            os.remove("tmp_" + asset)
            os.remove("tmp_grey_" + asset)

    print("Theme assets generated.\n")

# ------------------------------------------------
# Patch the icons with new values.
# ------------------------------------------------
def patch_icons():
    """
    Search through the icons and replace green with new values.
    """
    prop.current_dir = os.path.realpath(prop.target_dir_icons)

    if not prop.build_icons:
        return

    print("Patching icons...")

    # --> Metadata
    _replace_string("index.theme", "Name=" + prop.base_icon_theme, "Name=" + prop.new_icon_name)
    _replace_string("index.theme", "Inherits=ubuntu-mono-dark,", "Inherits=ubuntu-mono-dark,{0},".format(prop.base_icon_theme))
    _replace_string("index.theme", "Inherits=ubuntu-mono-light,", "Inherits=ubuntu-mono-light,{0},".format(prop.base_icon_theme))

    # --> General colours and shades
    _replace_string("*.svg", "#87A752", prop.new_hex_value)
    _replace_string("*.svg", "#ADC980", _get_hex_variant(prop.new_hex_value, 16))
    _replace_string("*.svg", "#688933", _get_hex_variant(prop.new_hex_value, -12))
    _replace_string("*.svg", "#4e7752", _get_hex_variant(prop.new_hex_value, -10))
    _replace_string("*.svg", "#4A6A17", _get_hex_variant(prop.new_hex_value, -24))

    #--> actions (go-home)
    _replace_string("*.svg", "#d9edb9", _get_hex_variant(prop.new_hex_value, 34))
    _replace_string("*.svg", "#f6daae", _get_hex_variant(prop.new_hex_value, 33))

    # --> preferences-desktop-theme
    _replace_string("*.svg", "#4e6827", _get_hex_variant(prop.new_hex_value, -21))
    _replace_string("*.svg", "#617f30", _get_hex_variant(prop.new_hex_value, -15))
    _replace_string("*.svg", "#87a556", _get_hex_variant(prop.new_hex_value, -1))
    _replace_string("*.svg", "#b4c990", _get_hex_variant(prop.new_hex_value, 19))

    # --> preferences-system-network
    _replace_string("*.svg", "#4d5e31", _get_hex_variant(prop.new_hex_value, -21))
    _replace_string("*.svg", "#abc187", _get_hex_variant(prop.new_hex_value, 15))
    _replace_string("*.svg", "#657b40", _get_hex_variant(prop.new_hex_value, -12))
    _replace_string("*.svg", "#4a5a2f", _get_hex_variant(prop.new_hex_value, -22))

    #--> system-file-manager
    _replace_string("*.svg", "#2e4705", _get_hex_variant(prop.new_hex_value, -34))

    # --> home
    _replace_string("*.svg", "#3b550e", _get_hex_variant(prop.new_hex_value, -30))

    print("Icons patched.\n")


# ------------------------------------------------
# Post-processing
# ------------------------------------------------
def optimise_icon_size():
    """
    Remove unmodified icons so they can inherited from the parent theme.
    """
    dest_icon_files = glob.glob(prop.target_dir_icons + "/**", recursive=True)

    print("Removing unmodified icons...")

    def __delete_if_same_file(dest, dest_prefix, new_dest_prefix):
        src = dest.replace(dest_prefix, new_dest_prefix)

        if not os.path.exists(src) or not os.path.exists(dest):
            return False

        if os.path.isdir(src) or os.path.isdir(dest):
            return False

        # Keep files that end with "-panel.svg"
        if dest[-10:] == "-panel.svg":
            return False

        # Keep files that start with "bluetooth-" (#18)
        if os.path.basename(dest)[:4] == "blue":
            return False

        # Keep files that start with "indicator-"
        if os.path.basename(dest)[:9] == "indicator":
            return False

        # Keep files that end with "-panel.svg" (#11)
        if dest[-10:] == "-close.svg":
            return False

        with open(src, "rb") as f:
            src_bin = f.read()
            src_hash = hashlib.md5(src_bin).hexdigest()

        with open(dest, "rb") as f:
            dest_bin = f.read()
            dest_hash = hashlib.md5(dest_bin).hexdigest()

        if src_hash == dest_hash:
            if prop.verbose:
                print("\n         " + src_hash + " | " + src)
                print("Deleted: " + dest_hash + " | " + dest)
            os.remove(dest)

        return src_hash == dest_hash

    for dest in dest_icon_files:
        __delete_if_same_file(dest, prop.target_dir_icons, os.path.join(prop.src_path, "usr", "share", "icons", prop.base_icon_theme))

    # Remove dead symlinks and empty directories.
    for path in glob.glob(prop.target_dir_icons + "/**", recursive=True):
        if os.path.islink(path) and not os.path.exists(path):
            if prop.verbose:
                print("Deleting non-existant symlink: " + path)
            os.remove(path)

        if os.path.isdir(path):
            if len(os.listdir(path)) == 0:
                if prop.verbose:
                    print("Deleting empty directory: " + path)
                os.rmdir(path)

    print("Finished cleaning up icons.\n")


def apply_icon_patches():
    """
    Perform some modifications that are different to upstream ubuntu-mate-icon-themes.
    """
    # We like the monochrome volume pop-up that's been used for years (#14)
    os.chdir(os.path.join(prop.target_dir_icons, "status", "24"))
    os.symlink("audio-volume-high-panel.svg", "audio-volume-high.svg")
    os.symlink("audio-volume-medium-panel.svg", "audio-volume-medium.svg")
    os.symlink("audio-volume-low-panel.svg", "audio-volume-low.svg")
    os.symlink("audio-volume-muted-panel.svg", "audio-volume-muted.svg")


# ------------------------------------------------
# Showtime!
# ------------------------------------------------
if __name__ == "__main__":

    # Check required external software is installed
    if not shutil.which("rsvg-convert"):
        print("'rsvg-convert' command not found. Please install 'librsvg2-bin'")
        exit(1)

    if not shutil.which("convert"):
        print("'convert' command not found. Please install 'imagemagick'")
        exit(1)

    prop = Properties()
    parse_arguments()

    # Output summary of what's going to happen.
    print("\nNew variant to be generated:\n")
    if prop.build_theme:
        print("          Base Theme: " + prop.base_theme)
        print("           New Theme: " + prop.new_theme_name)
    print("           Hex Value: " + prop.new_hex_value)
    if prop.build_icons:
        print("     Base Icon Theme: " + prop.base_icon_theme)
        print("           New Icons: " + prop.new_icon_name)
    print("              Source: " + prop.src_path)
    if prop.build_theme:
        print("    Install theme to: " + prop.target_dir_theme)
    if prop.build_icons:
        print("    Install icons to: " + prop.target_dir_icons)
    print("")

    # Perform the changes
    prep_targets()
    patch_theme()
    patch_icons()
    optimise_icon_size()
    apply_icon_patches()

    print("Generation of theme '{0}' complete.".format(prop.new_theme_name))
    exit(0)
